using System;
using System.Collections;
using System.ComponentModel;
using System.Drawing;
using System.Windows.Forms;
using System.Data;
using System.Reflection;

using Webb.Collections;
using Webb.Reports.ExControls.Data;
using Webb.Reports.ExControls.Views;


namespace Webb.Reports.ExControls.UI
{
	
	public class ConfigMatrixInfo:Webb.Reports.ExControls.UI.ExControlDesignerControlBase
	{
		private MatrixInfo matrixInfo=null;

		private GroupInfo LastSepGroup=null;
        private GroupInfo LastDisGroup=null;
	
		#region Codes Generated by Form Automaticly
			private System.Windows.Forms.Panel palMatrix;		
			private System.Windows.Forms.GroupBox Totalgroup;
			private System.Windows.Forms.CheckBox ChkRow;
			private System.Windows.Forms.CheckBox chkCell;
			private System.Windows.Forms.CheckBox ChkCol;
			private System.Windows.Forms.GroupBox Disgroup;
			private System.Windows.Forms.RadioButton radioDisSection;
			private System.Windows.Forms.RadioButton radioDisField;
			private System.Windows.Forms.GroupBox SepGroup;
			private System.Windows.Forms.Label lblCell;
			private System.Windows.Forms.Label lblRow;
			private System.Windows.Forms.Label lblCol;
			private System.Windows.Forms.PropertyGrid MatrixProperty;
			private System.Windows.Forms.GroupBox GroupReduce;
			private System.Windows.Forms.GroupBox groupOffset;
			private System.Windows.Forms.GroupBox groupSize;
			private System.Windows.Forms.Label lblRowSize;
			private System.Windows.Forms.Label lblColSize;
			private System.Windows.Forms.Label lblColOffset;
			private System.Windows.Forms.NumericUpDown YSize;
			private System.Windows.Forms.NumericUpDown XSize;
			private System.Windows.Forms.NumericUpDown Xoffset;
			private System.Windows.Forms.NumericUpDown Yoffset;
		private System.Windows.Forms.RadioButton radioSepSection;
		private System.Windows.Forms.RadioButton radioSepField;
		private System.Windows.Forms.CheckBox ChkSepMul;
        private CheckBox chkVerticalCell;
        private CheckBox chkSepHeader;
			private System.Windows.Forms.Label lblRowOffset;
			private void InitializeComponent()
			{
                this.palMatrix = new System.Windows.Forms.Panel();
                this.Totalgroup = new System.Windows.Forms.GroupBox();
                this.chkVerticalCell = new System.Windows.Forms.CheckBox();
                this.lblCell = new System.Windows.Forms.Label();
                this.ChkRow = new System.Windows.Forms.CheckBox();
                this.chkCell = new System.Windows.Forms.CheckBox();
                this.ChkCol = new System.Windows.Forms.CheckBox();
                this.lblRow = new System.Windows.Forms.Label();
                this.lblCol = new System.Windows.Forms.Label();
                this.Disgroup = new System.Windows.Forms.GroupBox();
                this.radioDisSection = new System.Windows.Forms.RadioButton();
                this.radioDisField = new System.Windows.Forms.RadioButton();
                this.SepGroup = new System.Windows.Forms.GroupBox();
                this.chkSepHeader = new System.Windows.Forms.CheckBox();
                this.ChkSepMul = new System.Windows.Forms.CheckBox();
                this.radioSepSection = new System.Windows.Forms.RadioButton();
                this.radioSepField = new System.Windows.Forms.RadioButton();
                this.GroupReduce = new System.Windows.Forms.GroupBox();
                this.groupOffset = new System.Windows.Forms.GroupBox();
                this.Xoffset = new System.Windows.Forms.NumericUpDown();
                this.Yoffset = new System.Windows.Forms.NumericUpDown();
                this.lblColOffset = new System.Windows.Forms.Label();
                this.lblRowOffset = new System.Windows.Forms.Label();
                this.groupSize = new System.Windows.Forms.GroupBox();
                this.YSize = new System.Windows.Forms.NumericUpDown();
                this.XSize = new System.Windows.Forms.NumericUpDown();
                this.lblRowSize = new System.Windows.Forms.Label();
                this.lblColSize = new System.Windows.Forms.Label();
                this.MatrixProperty = new System.Windows.Forms.PropertyGrid();
                this.palMatrix.SuspendLayout();
                this.Totalgroup.SuspendLayout();
                this.Disgroup.SuspendLayout();
                this.SepGroup.SuspendLayout();
                this.GroupReduce.SuspendLayout();
                this.groupOffset.SuspendLayout();
                ((System.ComponentModel.ISupportInitialize)(this.Xoffset)).BeginInit();
                ((System.ComponentModel.ISupportInitialize)(this.Yoffset)).BeginInit();
                this.groupSize.SuspendLayout();
                ((System.ComponentModel.ISupportInitialize)(this.YSize)).BeginInit();
                ((System.ComponentModel.ISupportInitialize)(this.XSize)).BeginInit();
                this.SuspendLayout();
                // 
                // palMatrix
                // 
                this.palMatrix.Controls.Add(this.Totalgroup);
                this.palMatrix.Controls.Add(this.Disgroup);
                this.palMatrix.Controls.Add(this.SepGroup);
                this.palMatrix.Controls.Add(this.GroupReduce);
                this.palMatrix.Dock = System.Windows.Forms.DockStyle.Left;
                this.palMatrix.Location = new System.Drawing.Point(0, 0);
                this.palMatrix.Name = "palMatrix";
                this.palMatrix.Size = new System.Drawing.Size(408, 400);
                this.palMatrix.TabIndex = 0;
                // 
                // Totalgroup
                // 
                this.Totalgroup.Controls.Add(this.chkVerticalCell);
                this.Totalgroup.Controls.Add(this.lblCell);
                this.Totalgroup.Controls.Add(this.ChkRow);
                this.Totalgroup.Controls.Add(this.chkCell);
                this.Totalgroup.Controls.Add(this.ChkCol);
                this.Totalgroup.Controls.Add(this.lblRow);
                this.Totalgroup.Controls.Add(this.lblCol);
                this.Totalgroup.Dock = System.Windows.Forms.DockStyle.Fill;
                this.Totalgroup.Font = new System.Drawing.Font("Verdana", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.Totalgroup.Location = new System.Drawing.Point(0, 298);
                this.Totalgroup.Name = "Totalgroup";
                this.Totalgroup.Size = new System.Drawing.Size(408, 102);
                this.Totalgroup.TabIndex = 5;
                this.Totalgroup.TabStop = false;
                this.Totalgroup.Text = "Total for Matrix";
                // 
                // chkVerticalCell
                // 
                this.chkVerticalCell.AutoSize = true;
                this.chkVerticalCell.Font = new System.Drawing.Font("Verdana", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.chkVerticalCell.Location = new System.Drawing.Point(16, 55);
                this.chkVerticalCell.Name = "chkVerticalCell";
                this.chkVerticalCell.Size = new System.Drawing.Size(252, 18);
                this.chkVerticalCell.TabIndex = 3;
                this.chkVerticalCell.Text = "Display totalcell in a vertical column ";
                this.chkVerticalCell.UseVisualStyleBackColor = true;
                // 
                // lblCell
                // 
                this.lblCell.Font = new System.Drawing.Font("Verdana", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.lblCell.Location = new System.Drawing.Point(32, 24);
                this.lblCell.Name = "lblCell";
                this.lblCell.Size = new System.Drawing.Size(104, 16);
                this.lblCell.TabIndex = 2;
                this.lblCell.Text = "Total Cell";
                this.lblCell.Click += new System.EventHandler(this.lblCell_Click);
                // 
                // ChkRow
                // 
                this.ChkRow.Location = new System.Drawing.Point(288, 24);
                this.ChkRow.Name = "ChkRow";
                this.ChkRow.Size = new System.Drawing.Size(16, 16);
                this.ChkRow.TabIndex = 1;
                this.ChkRow.CheckStateChanged += new System.EventHandler(this.ChkRow_CheckedChanged);
                // 
                // chkCell
                // 
                this.chkCell.Location = new System.Drawing.Point(16, 24);
                this.chkCell.Name = "chkCell";
                this.chkCell.Size = new System.Drawing.Size(16, 16);
                this.chkCell.TabIndex = 0;
                this.chkCell.CheckStateChanged += new System.EventHandler(this.chkCell_CheckedChanged);
                // 
                // ChkCol
                // 
                this.ChkCol.Font = new System.Drawing.Font("Verdana", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.ChkCol.Location = new System.Drawing.Point(152, 24);
                this.ChkCol.Name = "ChkCol";
                this.ChkCol.Size = new System.Drawing.Size(16, 16);
                this.ChkCol.TabIndex = 1;
                this.ChkCol.CheckStateChanged += new System.EventHandler(this.ChkCol_CheckedChanged);
                // 
                // lblRow
                // 
                this.lblRow.Font = new System.Drawing.Font("Verdana", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.lblRow.Location = new System.Drawing.Point(304, 24);
                this.lblRow.Name = "lblRow";
                this.lblRow.Size = new System.Drawing.Size(80, 16);
                this.lblRow.TabIndex = 2;
                this.lblRow.Text = "TotalColumn";
                this.lblRow.Click += new System.EventHandler(this.lblRow_Click);
                // 
                // lblCol
                // 
                this.lblCol.Font = new System.Drawing.Font("Verdana", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.lblCol.Location = new System.Drawing.Point(168, 24);
                this.lblCol.Name = "lblCol";
                this.lblCol.Size = new System.Drawing.Size(72, 16);
                this.lblCol.TabIndex = 2;
                this.lblCol.Text = "TotalRow";
                this.lblCol.Click += new System.EventHandler(this.lblCol_Click);
                // 
                // Disgroup
                // 
                this.Disgroup.Controls.Add(this.radioDisSection);
                this.Disgroup.Controls.Add(this.radioDisField);
                this.Disgroup.Dock = System.Windows.Forms.DockStyle.Top;
                this.Disgroup.Font = new System.Drawing.Font("Verdana", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.Disgroup.Location = new System.Drawing.Point(0, 232);
                this.Disgroup.Name = "Disgroup";
                this.Disgroup.Size = new System.Drawing.Size(408, 66);
                this.Disgroup.TabIndex = 4;
                this.Disgroup.TabStop = false;
                this.Disgroup.Text = "Group Information For Displaying Values";
                // 
                // radioDisSection
                // 
                this.radioDisSection.Font = new System.Drawing.Font("Verdana", 9F);
                this.radioDisSection.Location = new System.Drawing.Point(200, 24);
                this.radioDisSection.Name = "radioDisSection";
                this.radioDisSection.Size = new System.Drawing.Size(176, 32);
                this.radioDisSection.TabIndex = 0;
                this.radioDisSection.Text = "Group By SectionFilters";
                this.radioDisSection.Click += new System.EventHandler(this.radioDisSection_Click);
                // 
                // radioDisField
                // 
                this.radioDisField.Font = new System.Drawing.Font("Verdana", 9F);
                this.radioDisField.Location = new System.Drawing.Point(16, 24);
                this.radioDisField.Name = "radioDisField";
                this.radioDisField.Size = new System.Drawing.Size(136, 32);
                this.radioDisField.TabIndex = 0;
                this.radioDisField.Text = "Group By Field";
                this.radioDisField.Click += new System.EventHandler(this.radioDisField_Click);
                // 
                // SepGroup
                // 
                this.SepGroup.Controls.Add(this.chkSepHeader);
                this.SepGroup.Controls.Add(this.ChkSepMul);
                this.SepGroup.Controls.Add(this.radioSepSection);
                this.SepGroup.Controls.Add(this.radioSepField);
                this.SepGroup.Dock = System.Windows.Forms.DockStyle.Top;
                this.SepGroup.Font = new System.Drawing.Font("Verdana", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.SepGroup.Location = new System.Drawing.Point(0, 128);
                this.SepGroup.Name = "SepGroup";
                this.SepGroup.Size = new System.Drawing.Size(408, 104);
                this.SepGroup.TabIndex = 3;
                this.SepGroup.TabStop = false;
                this.SepGroup.Text = "Group Information For Separating Results";
                // 
                // chkSepHeader
                // 
                this.chkSepHeader.AutoSize = true;
                this.chkSepHeader.Font = new System.Drawing.Font("Verdana", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.chkSepHeader.Location = new System.Drawing.Point(243, 35);
                this.chkSepHeader.Name = "chkSepHeader";
                this.chkSepHeader.Size = new System.Drawing.Size(158, 18);
                this.chkSepHeader.TabIndex = 4;
                this.chkSepHeader.Text = "Have SeprateHeader";
                this.chkSepHeader.UseVisualStyleBackColor = true;
                // 
                // ChkSepMul
                // 
                this.ChkSepMul.Font = new System.Drawing.Font("Verdana", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.ChkSepMul.Location = new System.Drawing.Point(16, 32);
                this.ChkSepMul.Name = "ChkSepMul";
                this.ChkSepMul.Size = new System.Drawing.Size(224, 24);
                this.ChkSepMul.TabIndex = 3;
                this.ChkSepMul.Text = "Show Results In one Column";
                // 
                // radioSepSection
                // 
                this.radioSepSection.Font = new System.Drawing.Font("Verdana", 9F);
                this.radioSepSection.Location = new System.Drawing.Point(200, 60);
                this.radioSepSection.Name = "radioSepSection";
                this.radioSepSection.Size = new System.Drawing.Size(176, 32);
                this.radioSepSection.TabIndex = 0;
                this.radioSepSection.Text = "Group By SectionFilters";
                this.radioSepSection.Click += new System.EventHandler(this.radioSepSection_Click);
                // 
                // radioSepField
                // 
                this.radioSepField.Font = new System.Drawing.Font("Verdana", 9F);
                this.radioSepField.Location = new System.Drawing.Point(16, 60);
                this.radioSepField.Name = "radioSepField";
                this.radioSepField.Size = new System.Drawing.Size(120, 32);
                this.radioSepField.TabIndex = 0;
                this.radioSepField.Text = "Group By Field";
                this.radioSepField.Click += new System.EventHandler(this.radioSepField_Click);
                // 
                // GroupReduce
                // 
                this.GroupReduce.Controls.Add(this.groupOffset);
                this.GroupReduce.Controls.Add(this.groupSize);
                this.GroupReduce.Dock = System.Windows.Forms.DockStyle.Top;
                this.GroupReduce.Font = new System.Drawing.Font("Verdana", 9F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
                this.GroupReduce.Location = new System.Drawing.Point(0, 0);
                this.GroupReduce.Name = "GroupReduce";
                this.GroupReduce.Size = new System.Drawing.Size(408, 128);
                this.GroupReduce.TabIndex = 0;
                this.GroupReduce.TabStop = false;
                this.GroupReduce.Text = "Reducing Area";
                // 
                // groupOffset
                // 
                this.groupOffset.Controls.Add(this.Xoffset);
                this.groupOffset.Controls.Add(this.Yoffset);
                this.groupOffset.Controls.Add(this.lblColOffset);
                this.groupOffset.Controls.Add(this.lblRowOffset);
                this.groupOffset.Location = new System.Drawing.Point(16, 24);
                this.groupOffset.Name = "groupOffset";
                this.groupOffset.Size = new System.Drawing.Size(176, 88);
                this.groupOffset.TabIndex = 0;
                this.groupOffset.TabStop = false;
                this.groupOffset.Text = "Offset";
                // 
                // Xoffset
                // 
                this.Xoffset.Location = new System.Drawing.Point(96, 17);
                this.Xoffset.Name = "Xoffset";
                this.Xoffset.Size = new System.Drawing.Size(72, 22);
                this.Xoffset.TabIndex = 0;
                // 
                // Yoffset
                // 
                this.Yoffset.Location = new System.Drawing.Point(96, 56);
                this.Yoffset.Name = "Yoffset";
                this.Yoffset.Size = new System.Drawing.Size(72, 22);
                this.Yoffset.TabIndex = 0;
                // 
                // lblColOffset
                // 
                this.lblColOffset.Location = new System.Drawing.Point(24, 60);
                this.lblColOffset.Name = "lblColOffset";
                this.lblColOffset.Size = new System.Drawing.Size(72, 16);
                this.lblColOffset.TabIndex = 0;
                this.lblColOffset.Text = "ColStart";
                // 
                // lblRowOffset
                // 
                this.lblRowOffset.Location = new System.Drawing.Point(24, 24);
                this.lblRowOffset.Name = "lblRowOffset";
                this.lblRowOffset.Size = new System.Drawing.Size(72, 16);
                this.lblRowOffset.TabIndex = 0;
                this.lblRowOffset.Text = "RowStart";
                // 
                // groupSize
                // 
                this.groupSize.Controls.Add(this.YSize);
                this.groupSize.Controls.Add(this.XSize);
                this.groupSize.Controls.Add(this.lblRowSize);
                this.groupSize.Controls.Add(this.lblColSize);
                this.groupSize.Location = new System.Drawing.Point(216, 24);
                this.groupSize.Name = "groupSize";
                this.groupSize.Size = new System.Drawing.Size(176, 88);
                this.groupSize.TabIndex = 1;
                this.groupSize.TabStop = false;
                this.groupSize.Text = "Size";
                // 
                // YSize
                // 
                this.YSize.Location = new System.Drawing.Point(96, 56);
                this.YSize.Name = "YSize";
                this.YSize.Size = new System.Drawing.Size(72, 22);
                this.YSize.TabIndex = 0;
                // 
                // XSize
                // 
                this.XSize.Location = new System.Drawing.Point(96, 20);
                this.XSize.Name = "XSize";
                this.XSize.Size = new System.Drawing.Size(72, 22);
                this.XSize.TabIndex = 0;
                // 
                // lblRowSize
                // 
                this.lblRowSize.Location = new System.Drawing.Point(16, 24);
                this.lblRowSize.Name = "lblRowSize";
                this.lblRowSize.Size = new System.Drawing.Size(80, 16);
                this.lblRowSize.TabIndex = 1;
                this.lblRowSize.Text = "RowCount";
                // 
                // lblColSize
                // 
                this.lblColSize.Location = new System.Drawing.Point(16, 60);
                this.lblColSize.Name = "lblColSize";
                this.lblColSize.Size = new System.Drawing.Size(72, 16);
                this.lblColSize.TabIndex = 4;
                this.lblColSize.Text = "ColCount";
                // 
                // MatrixProperty
                // 
                this.MatrixProperty.Dock = System.Windows.Forms.DockStyle.Fill;
                this.MatrixProperty.LineColor = System.Drawing.SystemColors.ScrollBar;
                this.MatrixProperty.Location = new System.Drawing.Point(408, 0);
                this.MatrixProperty.Name = "MatrixProperty";
                this.MatrixProperty.Size = new System.Drawing.Size(248, 400);
                this.MatrixProperty.TabIndex = 1;
                // 
                // ConfigMatrixInfo
                // 
                this.Controls.Add(this.MatrixProperty);
                this.Controls.Add(this.palMatrix);
                this.Name = "ConfigMatrixInfo";
                this.Size = new System.Drawing.Size(656, 400);               
                this.palMatrix.ResumeLayout(false);
                this.Totalgroup.ResumeLayout(false);
                this.Totalgroup.PerformLayout();
                this.Disgroup.ResumeLayout(false);
                this.SepGroup.ResumeLayout(false);
                this.SepGroup.PerformLayout();
                this.GroupReduce.ResumeLayout(false);
                this.groupOffset.ResumeLayout(false);
                ((System.ComponentModel.ISupportInitialize)(this.Xoffset)).EndInit();
                ((System.ComponentModel.ISupportInitialize)(this.Yoffset)).EndInit();
                this.groupSize.ResumeLayout(false);
                ((System.ComponentModel.ISupportInitialize)(this.YSize)).EndInit();
                ((System.ComponentModel.ISupportInitialize)(this.XSize)).EndInit();
                this.ResumeLayout(false);

			}		
		#endregion
		public ConfigMatrixInfo()
		{
			InitializeComponent();		
		}
		public override void SetView(Webb.Reports.ExControls.Views.ExControlView i_View)
		{
			if(i_View is CompactGroupView)
			{
				CompactGroupView m_CompactGroupView = i_View as CompactGroupView;

				if(!m_CompactGroupView.Matrix)
				{
					this.palMatrix.Enabled=false;
					return;
				}	
				if(m_CompactGroupView.MatrixDisplay==ComputedStyle.Grid)
				{
					this.Disgroup.Visible=false;
				}
				else
				{
					this.Disgroup.Visible=true;
				}
		
				this.palMatrix.Enabled=true;

				if(m_CompactGroupView.MatrixInfo==null)
				{				
					if(m_CompactGroupView.RootGroupInfo==null||
						m_CompactGroupView.RootGroupInfo.SubGroupInfos==null||
						m_CompactGroupView.RootGroupInfo.SubGroupInfos.Count==0)
					{
						matrixInfo=new MatrixInfo(m_CompactGroupView.RootGroupInfo,null,null,null); 
					
					}
					else
					{
						matrixInfo=new MatrixInfo(m_CompactGroupView.RootGroupInfo,
							m_CompactGroupView.RootGroupInfo.SubGroupInfos[0],null,null);
					}

				}
				else
				{
					matrixInfo=m_CompactGroupView.MatrixInfo.Copy();
				}

                this.SetColumnsWidth(m_CompactGroupView);  //Add this code at 2011-6-8 15:40:30@simon
			}
			else
			{
				MatrixGroupView m_MatrixGroupView = i_View as MatrixGroupView;

				if(m_MatrixGroupView.MatrixDisplay==ComputedStyle.Grid)
				{
					this.Disgroup.Visible=false;
				}
				else
				{
					this.Disgroup.Visible=true;
				}
		
				this.palMatrix.Enabled=true;

				if(m_MatrixGroupView.MatrixInfo==null)
				{
				
					if(m_MatrixGroupView.RootGroupInfo==null||
						m_MatrixGroupView.RootGroupInfo.SubGroupInfos==null||
						m_MatrixGroupView.RootGroupInfo.SubGroupInfos.Count==0)
					{
						matrixInfo=new MatrixInfo(m_MatrixGroupView.RootGroupInfo,null,null,null); 
					
					}
					else
					{
						matrixInfo=new MatrixInfo(m_MatrixGroupView.RootGroupInfo,
							m_MatrixGroupView.RootGroupInfo.SubGroupInfos[0],null,null);
					}

				}
				else
				{
					matrixInfo=m_MatrixGroupView.MatrixInfo.Copy();
				}
                this.SetColumnsWidth(m_MatrixGroupView);  //Add this code at 2011-6-8 15:40:30@simon
			}
           this.SetMatrixStyle();
			
		}
		private void SetMatrixStyle()
		{
			if(matrixInfo.DisGroup is SectionGroupInfo)
			{
				this.radioDisSection.Checked=true;
			}
			else
			{
			   this.radioDisField.Checked=true;
			}
           if(matrixInfo.SepGroup is SectionGroupInfo)
			{
               this.radioSepSection.Checked=true;
			}
			else
			{
				this.radioSepField.Checked=true;
			}
            this.chkSepHeader.Checked = matrixInfo.HaveSeprateHeader;
			this.ChkSepMul.Checked=matrixInfo.ShowInOneCol;  //2009-3-31 15:06:43@Simon Add this Code
            this.chkVerticalCell.Checked = matrixInfo.TotalCellVertical;
            this.chkCell.Checked=matrixInfo.CellTotal.ShowTotal;
            this.ChkRow.Checked=matrixInfo.RowTotal.ShowTotal;
			this.ChkCol.Checked=matrixInfo.ColTotal.ShowTotal;
			this.Xoffset.Value=this.matrixInfo.Rect.X;
			this.Yoffset.Value=this.matrixInfo.Rect.Y;
			this.XSize.Value=this.matrixInfo.Rect.Width;
			this.YSize.Value=this.matrixInfo.Rect.Height;
			this.MatrixProperty.SelectedObject=null;

		}
		private void UpdateMatrixStyle()  //2009-3-31 15:11:17@Simon Add this Code
		{
			this.palMatrix.Enabled=true;

			matrixInfo.CellTotal.ShowTotal=this.chkCell.Checked;
			matrixInfo.RowTotal.ShowTotal=this.ChkRow.Checked;
			matrixInfo.ColTotal.ShowTotal=this.ChkCol.Checked;
          

			Rectangle rect=new Rectangle();
			rect.X=(int)this.Xoffset.Value;
			rect.Y=(int)this.Yoffset.Value;
			rect.Width=(int)this.XSize.Value;
			rect.Height=(int)this.YSize.Value;
			matrixInfo.Rect=rect;
			matrixInfo.ShowInOneCol=this.ChkSepMul.Checked;
            matrixInfo.TotalCellVertical=this.chkVerticalCell.Checked;
            matrixInfo.HaveSeprateHeader = this.chkSepHeader.Checked;
			
		}
		public override void UpdateView(Webb.Reports.ExControls.Views.ExControlView i_View)
		{
             this.UpdateMatrixStyle();

             int nCol = 0;

			if(i_View is CompactGroupView)
			{
				CompactGroupView m_CompactGroupView = i_View as CompactGroupView;

				if(!m_CompactGroupView.Matrix)
				{
					this.palMatrix.Enabled=false;

					return;
				}

				m_CompactGroupView.MatrixInfo=matrixInfo.Copy();

                if (m_CompactGroupView.ShowRowIndicators)
                {
                    nCol++;
                }
               
                //UpdateMatrixColumnsWidth(m_CompactGroupView.RootGroupInfo, ref nCol, m_CompactGroupView.ColumnsWidth, m_CompactGroupView.MatrixInfo);
			}
			else
			{
				MatrixGroupView m_MatrixGroupView = i_View as MatrixGroupView;
				
				m_MatrixGroupView.MatrixInfo=matrixInfo.Copy();

                if (m_MatrixGroupView.ShowRowIndicators)
                {
                    nCol++;
                }

                //UpdateMatrixColumnsWidth(m_MatrixGroupView.RootGroupInfo, ref nCol, m_MatrixGroupView.ColumnsWidth, m_MatrixGroupView.MatrixInfo);
			}
		}

		private void ChkRow_CheckedChanged(object sender, System.EventArgs e)
		{
            this.matrixInfo.RowTotal.ShowTotal=ChkRow.Checked;

			this.MatrixProperty.SelectedObject=this.matrixInfo.RowTotal;			
		}
		

		private void chkCell_CheckedChanged(object sender, System.EventArgs e)
		{
			this.matrixInfo.CellTotal.ShowTotal=chkCell.Checked;

		   this.MatrixProperty.SelectedObject=this.matrixInfo.CellTotal;
			
		}

		private void ChkCol_CheckedChanged(object sender, System.EventArgs e)
		{
			this.matrixInfo.ColTotal.ShowTotal=ChkCol.Checked;

		    this.MatrixProperty.SelectedObject=this.matrixInfo.ColTotal;
			
		}

		private void radioDisField_Click(object sender, System.EventArgs e)
		{
			if(this.radioDisField.Checked)
			{
				if(matrixInfo.DisGroup is SectionGroupInfo)
				{
//					matrixInfo.DisGroup=new FieldGroupInfo();
					if(LastDisGroup==null||LastDisGroup is SectionGroupInfo)
					{
						LastDisGroup=matrixInfo.DisGroup;

						matrixInfo.DisGroup=new FieldGroupInfo("");						
					}
					else
					{
						GroupInfo TempInfo=matrixInfo.DisGroup;
						
						matrixInfo.DisGroup=LastDisGroup;
						
						LastDisGroup=TempInfo;	
					}
				} 
				this.MatrixProperty.SelectedObject=matrixInfo.DisGroup;
			}
        }

        #region Set/Update Column Width
      
            #region Set  ColumnsWidth      
            private void SetColumnsWidth(CompactGroupView i_View)
            {
                if (i_View == null) return;
                if (i_View.ColumnsWidth == null || i_View.ColumnsWidth.Count <= 0) return;
                if (i_View.PrintingTable != null)
                {
                    int ColumnsCount = i_View.PrintingTable.GetColumns();
                    i_View.ColumnsWidth.Clear();
                    Int32Collection ColumnsWidthCopy = new Int32Collection();
                    for (int i = 0; i < ColumnsCount; i++)
                    {
                        i_View.ColumnsWidth.Add(i_View.PrintingTable.GetColumnWidth(i));
                    }


                }
                int nCol = 0;

                if (i_View.ShowRowIndicators)
                {
                    nCol++;
                }
                GroupInfo m_GroupInfo = i_View.RootGroupInfo;

                //if (i_View.Matrix)
                //{
                //    ApplyMatrixColumnsWidth(m_GroupInfo, ref nCol, i_View.ColumnsWidth, i_View.MatrixInfo);
                //}           
            }

            private void SetColumnsWidth(MatrixGroupView i_View)
            {
                if (i_View == null) return;
                if (i_View.ColumnsWidth == null || i_View.ColumnsWidth.Count <= 0) return;
                if (i_View.PrintingTable != null)
                {
                    int ColumnsCount = i_View.PrintingTable.GetColumns();
                    i_View.ColumnsWidth.Clear();
                    Int32Collection ColumnsWidthCopy = new Int32Collection();
                    for (int i = 0; i < ColumnsCount; i++)
                    {
                        i_View.ColumnsWidth.Add(i_View.PrintingTable.GetColumnWidth(i));
                    }


                }
                int nCol = 0;

                if (i_View.ShowRowIndicators)
                {
                    nCol++;
                }
                GroupInfo m_GroupInfo = i_View.RootGroupInfo;

                ApplyMatrixColumnsWidth(m_GroupInfo, ref nCol, i_View.ColumnsWidth, i_View.MatrixInfo);

            }

            private void ApplyMatrixColumnsWidth(GroupInfo groupInfo, ref int nCol, Int32Collection ColumnsWidth, MatrixInfo matrixInfo) //Add at 2009-2-18 16:09:40@Simon
            {
                if (matrixInfo == null) return;

                if (groupInfo.SubGroupInfos.Count > 0)
                {
                    groupInfo.SubGroupInfos[0]._ColumnWidth = ColumnsWidth[nCol];
                }

                nCol++;

                if (matrixInfo.HaveSeprateHeader && matrixInfo.ShowInOneCol)   //Separate Header
                {
                    matrixInfo.SepGroup._ColumnWidth = ColumnsWidth[nCol];

                    nCol++;
                }

                if (matrixInfo.RowTotal.ShowTotal)
                {
                    if (matrixInfo.RowTotal.ShowFront)
                    {
                        matrixInfo.RowTotal.ColumnWidth = ColumnsWidth[nCol];

                        nCol++;
                    }
                    else
                    {
                        matrixInfo.RowTotal.ColumnWidth = ColumnsWidth[ColumnsWidth.Count - 1];
                    }
                }

                if (matrixInfo.CellTotal.ShowTotal && matrixInfo.CellTotal.ShowFront && matrixInfo.TotalCellVertical)
                {
                    matrixInfo.DisGroup._ColumnWidth = ColumnsWidth[nCol];

                    nCol++;
                }
                if (matrixInfo.MatrixDisplay == ComputedStyle.Group)
                {
                    if (!groupInfo.FollowSummaries) groupInfo._ColumnWidth = ColumnsWidth[nCol++];

                    foreach (GroupSummary m_Summary in groupInfo.Summaries)
                    {
                        if (nCol >= ColumnsWidth.Count) return;

                        m_Summary.ColumnWidth = ColumnsWidth[nCol];

                        nCol++;
                    }

                    if (groupInfo.FollowSummaries) groupInfo._ColumnWidth = ColumnsWidth[nCol++];
                }
                else
                {
                    #region Grid
                    if (matrixInfo.GridInfo.Columns.Count == 0)
                    {
                        groupInfo._ColumnWidth = ColumnsWidth[nCol];

                        return;
                    }

                    if (matrixInfo.GridInfo.SortingFrequence == SortingFrequence.ShowBeforeColumns)
                    {
                        groupInfo._ColumnWidth = ColumnsWidth[nCol];

                        nCol++;

                    }

                    foreach (GridColumn column in matrixInfo.GridInfo.Columns)
                    {
                        column.ColumnWidth = ColumnsWidth[nCol];

                        nCol++;

                    }

                    if (matrixInfo.GridInfo.SortingFrequence == SortingFrequence.ShowAfterColumns)
                    {
                        groupInfo._ColumnWidth = ColumnsWidth[nCol];

                        nCol++;
                    }
                    #endregion
                }
                if (matrixInfo.CellTotal.ShowTotal && !matrixInfo.CellTotal.ShowFront && matrixInfo.TotalCellVertical)
                {
                    matrixInfo.DisGroup._ColumnWidth = ColumnsWidth[nCol];

                    nCol++;
                }


            }

        #endregion

            #region Update Column Width      
  
        private void UpdateMatrixColumnsWidth(GroupInfo groupInfo, ref int nCol, Int32Collection ColumnsWidth, MatrixInfo matrixInfo) //Add at 2009-2-18 16:09:40@Simon
        {
            if (groupInfo==null||matrixInfo == null) return;

            if (groupInfo.SubGroupInfos.Count > 0)
            {
                while(nCol >= ColumnsWidth.Count) ColumnsWidth.Add(55);

                ColumnsWidth[nCol] = groupInfo.SubGroupInfos[0]._ColumnWidth;
            }

            nCol++;

            if (matrixInfo.HaveSeprateHeader && matrixInfo.ShowInOneCol)   //Separate Header
            {
                while(nCol >= ColumnsWidth.Count) ColumnsWidth.Add(55);

                ColumnsWidth[nCol] = matrixInfo.SepGroup._ColumnWidth;

                nCol++;
            }

            if (matrixInfo.RowTotal.ShowTotal)
            {
                if (matrixInfo.RowTotal.ShowFront)
                {
                    while(nCol >= ColumnsWidth.Count) ColumnsWidth.Add(55);

                    ColumnsWidth[nCol] = matrixInfo.RowTotal.ColumnWidth;

                    nCol++;
                }
                else
                {
                   if(ColumnsWidth.Count>0)ColumnsWidth[ColumnsWidth.Count - 1] = matrixInfo.RowTotal.ColumnWidth;
                }
            }

            if (matrixInfo.CellTotal.ShowTotal && matrixInfo.CellTotal.ShowFront && matrixInfo.TotalCellVertical)
            {
                while(nCol >= ColumnsWidth.Count) ColumnsWidth.Add(55);

                ColumnsWidth[nCol] = matrixInfo.DisGroup._ColumnWidth;

                nCol++;
            }
            if (matrixInfo.MatrixDisplay == ComputedStyle.Group)
            {
                if (!groupInfo.FollowSummaries)
                {
                    while(nCol >= ColumnsWidth.Count) ColumnsWidth.Add(55);

                    ColumnsWidth[nCol++] = groupInfo._ColumnWidth;
                }
                foreach (GroupSummary m_Summary in groupInfo.Summaries)
                {
                    while(nCol >= ColumnsWidth.Count) ColumnsWidth.Add(55);

                    ColumnsWidth[nCol] = m_Summary.ColumnWidth;

                    nCol++;
                }

                if (groupInfo.FollowSummaries)
                {
                    while(nCol >= ColumnsWidth.Count) ColumnsWidth.Add(55);

                    ColumnsWidth[nCol++] = groupInfo._ColumnWidth;
                }
            }
            else
            {
                #region Grid
                if (matrixInfo.GridInfo.Columns.Count == 0)
                {
                    while (nCol >= ColumnsWidth.Count) ColumnsWidth.Add(55);

                    ColumnsWidth[nCol] = groupInfo._ColumnWidth;

                    return;
                }

                if (matrixInfo.GridInfo.SortingFrequence == SortingFrequence.ShowBeforeColumns)
                {
                    while (nCol >= ColumnsWidth.Count) ColumnsWidth.Add(55);

                    ColumnsWidth[nCol] = groupInfo._ColumnWidth;

                    nCol++;

                }

                foreach (GridColumn column in matrixInfo.GridInfo.Columns)
                {
                    while (nCol >= ColumnsWidth.Count) ColumnsWidth.Add(55);

                    ColumnsWidth[nCol] = column.ColumnWidth;

                    nCol++;

                }

                if (matrixInfo.GridInfo.SortingFrequence == SortingFrequence.ShowAfterColumns)
                {
                    while (nCol >= ColumnsWidth.Count) ColumnsWidth.Add(55);

                    ColumnsWidth[nCol] = groupInfo._ColumnWidth;

                    nCol++;
                }
                #endregion
            }
            if (matrixInfo.CellTotal.ShowTotal && !matrixInfo.CellTotal.ShowFront && matrixInfo.TotalCellVertical)
            {
                while(nCol >= ColumnsWidth.Count) ColumnsWidth.Add(55);

                ColumnsWidth[nCol] = matrixInfo.DisGroup._ColumnWidth;

                nCol++;
            }


        }

        #endregion
        #endregion

        private void radioDisSection_Click(object sender, System.EventArgs e)
		{
			if(this.radioDisSection.Checked)
			{
				if(matrixInfo.DisGroup is FieldGroupInfo)
				{
					if(LastDisGroup==null||LastDisGroup is FieldGroupInfo)
					{
						LastDisGroup=matrixInfo.DisGroup;

						matrixInfo.DisGroup=new SectionGroupInfo();						
					}
					else
					{
						GroupInfo TempInfo=matrixInfo.DisGroup;
						
						matrixInfo.DisGroup=LastDisGroup;
						
                        LastDisGroup=TempInfo;	
					}
				} 
				this.MatrixProperty.SelectedObject=matrixInfo.DisGroup;
			}           			
		}

		private void radioSepField_Click(object sender, System.EventArgs e)
		{
			if(this.radioSepField.Checked)
			{
				if(matrixInfo.SepGroup is SectionGroupInfo)
				{
//					matrixInfo.SepGroup=new FieldGroupInfo();
					if(LastSepGroup==null||LastSepGroup is SectionGroupInfo)
					{
						LastSepGroup=matrixInfo.SepGroup;

						matrixInfo.SepGroup=new FieldGroupInfo("");						
					}
					else
					{
						GroupInfo TempInfo=matrixInfo.SepGroup;
						
						matrixInfo.SepGroup=LastSepGroup;
						
						LastSepGroup=TempInfo;	
					}
				} 
				this.MatrixProperty.SelectedObject=matrixInfo.SepGroup;

			}
		}

		private void radioSepSection_Click(object sender, System.EventArgs e)
		{
			if(this.radioSepSection.Checked)
			{
				if(matrixInfo.SepGroup is FieldGroupInfo)
				{
//					matrixInfo.SepGroup=new SectionGroupInfo();
					if(LastSepGroup==null||LastSepGroup is FieldGroupInfo)
					{
						LastSepGroup=matrixInfo.SepGroup;

						matrixInfo.SepGroup=new SectionGroupInfo();
						
					}
					else
					{
						GroupInfo TempInfo=matrixInfo.SepGroup;
						
						matrixInfo.SepGroup=LastSepGroup;
						
						LastSepGroup=TempInfo;						
					
					}
				} 
				this.MatrixProperty.SelectedObject=matrixInfo.SepGroup;
			}		
		}

		private void lblCol_Click(object sender, System.EventArgs e)
		{
		    this.MatrixProperty.SelectedObject=this.matrixInfo.ColTotal;
		}

		private void lblCell_Click(object sender, System.EventArgs e)
		{
		  this.MatrixProperty.SelectedObject=this.matrixInfo.CellTotal;		
		}

		private void lblRow_Click(object sender, System.EventArgs e)
		{
		    this.MatrixProperty.SelectedObject=this.matrixInfo.RowTotal;
		}
	}
}
